Q.1. Create RNN model and analyze the Google stock price dataset. Find out
increasing or decreasing trends of stock price for the next day
Python Code Example:

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.metrics import accuracy_score
df = yf.download('GOOGL', start='2010-01-01', end='2024-01-01')
df.head()
df = df[['Close']]
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df)
def create_dataset(data, time_step=60):
 X, y = [], []
 for i in range(time_step, len(data)):
 X.append(data[i-time_step:i, 0])
 y.append(1 if data[i, 0] > data[i-1, 0] else 0) 
for decrease
 return np.array(X), np.array(y)
X, y = create_dataset(scaled_data)
X = X.reshape(X.shape[0], X.shape[1], 1) 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
model = Sequential()
model.add(LSTM(units=50, return_sequences=True,
input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=1, activation='sigmoid')) 
(increase), 0 (decrease)
model.compile(optimizer='adam', loss='binary_crossentropy',
metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10, batch_size=32,
validation_data=(X_test, y_test))
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {accuracy * 100:.2f}%')
last_60_days = scaled_data[-60:]
last_60_days = last_60_days.reshape(1, -1)
last_60_days = last_60_days.reshape((1, 60, 1))
predicted_trend = model.predict(last_60_days)
predicted_trend = 1 if predicted_trend[0][0] > 0.5 else 0
if predicted_trend == 1:
 print("The stock price is predicted to increase tomorrow.")
else:
 print("The stock price is predicted to decrease tomorrow.")
predicted_stock_price = model.predict(X_test)
predicted_stock_price = (predicted_stock_price > 0.5)
plt.figure(figsize=(10, 6))
plt.plot(y_test, color='blue', label='Real Stock Price Trend')
plt.plot(predicted_stock_price, color='red', label='Predicted Stock Price Trend')
plt.title('Stock Price Trend Prediction')
plt.xlabel('Days')
plt.ylabel('Trend (1 = Increase, 0 = Decrease)')
plt.legend()
plt.show()

Q.2. Write a python program to implement simple Linear Regression for
predicting house price

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
actual dataset (e.g., 'house_prices.csv')
data = {
 'Area': [1500, 1800, 2400, 3000, 3500, 4000, 4500, 5000, 5500, 6000],
 'Price': [245000, 312000, 369000, 450000, 512000, 570000, 600000, 650000,
700000, 750000]
}
df = pd.DataFrame(data)
X = df[['Area']] 
y = df['Price'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')
plt.scatter(X_test, y_test, color='blue', label='Actual prices')
plt.plot(X_test, y_pred, color='red', label='Regression line')
plt.title('House Price Prediction')
plt.xlabel('Area (Square feet)')
plt.ylabel('Price')
plt.legend()
plt.show()
new_area = np.array([[2500]])
predicted_price = model.predict(new_area)
print(f'Predicted price for a house with 2500 sq. feet:
${predicted_price[0]:,.2f}')