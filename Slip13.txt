Q.1 Write a Java Program to implement an Adapter design pattern in mobile charger. Define two
classes – Volt (to measure volts) and Socket (producing constant volts of 120V). Build an
adapter that can produce 3 volts, 12 volts and default 120 volts. Implements Adapter pattern
using Class Adapter
Step 1: Define the Volt Class
The Volt class represents the voltage and will have methods to get the voltage in different units.
java
Copy code
public class Volt {
 private int volts;
 public Volt(int volts) {
 this.volts = volts;
 }
 public int getVolts() {
 return volts;
 }
}
Step 2: Define the Socket Class
The Socket class represents a socket that provides 120V (constant voltage).
java
Copy code
public class Socket {
 public Volt getVolt() {
 return new Volt(120); // Socket provides 120V by default
 }
}
Step 3: Define the Adapter Class
In the Class Adapter design pattern, the adapter extends the existing class (Socket) to modify
the behavior. We will create an adapter that can return different voltages (3V, 12V, or 120V).
java
Copy code
public class SocketAdapter extends Socket {

 // Convert 120V to 3V
 public Volt get3Volt() {
 Volt v = getVolt(); // Get 120V from the Socket
 return convertVolt(v, 40); // 120V / 40 = 3V
 }
 // Convert 120V to 12V
 public Volt get12Volt() {
 Volt v = getVolt(); // Get 120V from the Socket
 return convertVolt(v, 10); // 120V / 10 = 12V
 }
 // No conversion, just return 120V
 public Volt get120Volt() {
 return getVolt(); // Return 120V
 }
 // Helper method to convert voltage
 private Volt convertVolt(Volt v, int divider) {
 return new Volt(v.getVolts() / divider);
 }
}
Step 4: Test the Adapter Pattern
Finally, we will create a main class to test the functionality of the Adapter pattern by creating
a SocketAdapter and using it to get 3V, 12V, and 120V.
java
Copy code
public class AdapterPatternTest {
 public static void main(String[] args) {
 SocketAdapter socketAdapter = new SocketAdapter();
 // Getting 120V from the socket
 System.out.println("Voltage obtained from socket: " +
socketAdapter.get120Volt().getVolts() + "V");
 // Getting 12V using the adapter
 System.out.println("Voltage after conversion to 12V: " +
socketAdapter.get12Volt().getVolts() + "V");
 // Getting 3V using the adapter
 System.out.println("Voltage after conversion to 3V: " +
socketAdapter.get3Volt().getVolts() + "V");
 }
}





Q.2 Write a program to measure the distance using ultrasonic sensor and make LED blink using
Arduino.
#define TRIG_PIN 9 // Trigger pin of HC-SR04
#define ECHO_PIN 10 // Echo pin of HC-SR04
#define LED_PIN 13 // LED pin
void setup() {
// Initialize the serial communication
Serial.begin(9600);
// Initialize the pins
pinMode(TRIG_PIN, OUTPUT);
pinMode(ECHO_PIN, INPUT);
pinMode(LED_PIN, OUTPUT);
// Make sure the LED is off initially
digitalWrite(LED_PIN, LOW);
}
void loop() {
// Send a pulse to trigger the ultrasonic sensor
digitalWrite(TRIG_PIN, LOW); // Ensure the trigger pin is LOW
delayMicroseconds(2);
digitalWrite(TRIG_PIN, HIGH); // Send the pulse
delayMicroseconds(10);
digitalWrite(TRIG_PIN, LOW); // Stop the pulse
// Measure the time for the pulse to return
long duration = pulseIn(ECHO_PIN, HIGH);
// Calculate the distance in cm (Speed of sound = 343 m/s = 0.0343 cm/µs)
long distance = duration * 0.0343 / 2;
// Print the distance to the Serial Monitor
Serial.print("Distance: ");
Serial.print(distance);
Serial.println(" cm");
// If the distance is less than 20 cm, blink the LED
if (distance < 20) {
digitalWrite(LED_PIN, HIGH); // Turn LED on
delay(500); // Wait for 500ms
digitalWrite(LED_PIN, LOW); // Turn LED off
delay(500); // Wait for 500ms
} else {
digitalWrite(LED_PIN, LOW); // Keep LED off if distance > 20 cm
}
// Add a small delay before taking the next reading
delay(100);
}
