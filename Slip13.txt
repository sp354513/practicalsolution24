Q.1) Extend the previous Express.js application to include middleware for parsing
request bodies (e.g., JSON, form data) and validating input data. Send appropriate
JSON responses for success and error cases

// app.js

const express = require('express');
const bodyParser = require('body-parser');
const app = express();
app.use(bodyParser.json()); 
app.use(bodyParser.urlencoded({ extended: true })); 
let users = [];
function validateUserData(req, res, next) {
const { name, email, age } = req.body;
if (!name || !email || !age) {
return res.status(400).json({ message: "Name, email, and age are required." });
}
const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
if (!emailRegex.test(email)) {
return res.status(400).json({ message: "Invalid email format." });
}
if (isNaN(age)) {
return res.status(400).json({ message: "Age must be a number." });
}
next();
}
app.post('/users', validateUserData, (req, res) => {
const { name, email, age } = req.body;
const newUser = {
id: users.length + 1, 
name,
email,
age
};
users.push(newUser);
res.status(201).json({
message: "User created successfully",
user: newUser
});
});
app.get('/users', (req, res) => {
res.status(200).json(users);
});
app.listen(3000, () => {
console.log('Server running on port 3000');
});

Q.2) Create a simple Angular component that takes input data and displays it. 

1. app.component.ts - The TypeScript file where we define the component's
logic.
2. app.component.html - The HTML file for the component's template.

Step 1: Set up the Angular Component

If you haven't already, create a new Angular component using the Angular CLI:

ng generate component displayInput

This command will create the component files needed, including displayinput.component.ts and display-input.component.html.

Step 2: Implement the Component

1. display-input.component.ts (TypeScript Logic)
Define the input property and the function to handle the display of input data.


// display-input.component.ts
import { Component } from '@angular/core';
@Component({
 selector: 'app-display-input',
 templateUrl: './display-input.component.html',
 styleUrls: ['./display-input.component.css']
})
export class DisplayInputComponent {
 userInput: string = ''; 
 displayText: string = ''; 
 updateDisplay() {
 this.displayText = this.userInput;
 }
}

2. display-input.component.html (HTML Template)
Add an input field, a button, and an area to display the input text.

<div style="text-align: center; margin-top: 20px;">
 <h2>Enter Some Text</h2>
 <input [(ngModel)]="userInput" placeholder="Type something..." />
 <button (click)="updateDisplay()">Display Text</button>
 <h3 *ngIf="displayText">You entered: {{ displayText }}</h3>
</div>


// app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms'; 
import { AppComponent } from './app.component';
import { DisplayInputComponent } from './display-input/displayinput.component';
@NgModule({
 declarations: [
 AppComponent,
 DisplayInputComponent
 ],
 imports: [
 BrowserModule,
 FormsModule 
 ],
 providers: [],
 bootstrap: [AppComponent]
})
export class AppModule { }

<!-- app.component.html -->
<app-display-input></app-display-input>

ng serve