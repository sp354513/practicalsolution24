Q.1) Write an AngularJS script for addition of two numbers using ng-init, ng-model &
ng-bind. And also demonstrate ng-show, ng-disabled, ng-click directives on button
component. 

index.html

<!DOCTYPE html>
<html ng-app="AdditionApp">
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>
<body ng-controller="AdditionController" ng-init="num1=0; num2=0; showResult=false">
    <h2>AngularJS Addition Example</h2>
    <label>Number 1:</label>
    <input type="number" ng-model="num1" placeholder="Enter first number">
    <br><br>
    <label>Number 2:</label>
    <input type="number" ng-model="num2" placeholder="Enter second number">
    <br><br>
    <button 
        ng-click="calculateSum()" 
        ng-disabled="!num1 || !num2" 
        ng-init="showResult=false">
        Add Numbers
    </button>
    <br><br>
    <div ng-show="showResult">
        <strong>Sum: </strong><span ng-bind="sum"></span>
    </div>
    <button ng-click="reset()">Reset</button>
    <script>
        angular.module('AdditionApp', [])
            .controller('AdditionController', function ($scope) {
                $scope.calculateSum = function () {
                    $scope.sum = $scope.num1 + $scope.num2;
                    $scope.showResult = true;
                };
                $scope.reset = function () {
                    $scope.num1 = 0;
                    $scope.num2 = 0;
                    $scope.sum = null;
                    $scope.showResult = false;
                };
            });
    </script>
</body>
</html>


Q.2) Create a Node.js application that reads data from multiple files asynchronously
using promises and async/await

app.js

const fs = require('fs').promises;
async function readFileAsync(filePath) {
  try {
    const data = await fs.readFile(filePath, 'utf-8');
    return data;
  } catch (error) {
    throw new Error(`Error reading file ${filePath}: ${error.message}`);
  }
}
async function readMultipleFiles(filePaths) {
  try {
    const fileReadPromises = filePaths.map((path) => readFileAsync(path));
    const fileContents = await Promise.all(fileReadPromises);
    return fileContents;
  } catch (error) {
    throw new Error(`Error reading multiple files: ${error.message}`);
  }
}
async function main() {
  try {
    const filePaths = ['file1.txt', 'file2.txt', 'file3.txt']; 
    console.log('Reading files...');
    const contents = await readMultipleFiles(filePaths);
    contents.forEach((content, index) => {
      console.log(`\nContent of ${filePaths[index]}:\n${content}`);
    });
  } catch (error) {
    console.error(error.message);
  }
}
main();