Q.1) Write a program to sort a list of n numbers in ascending order using selection sort and 
determine the time required to sort the elements. 

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void selectionSort(int arr[], int n) {
 int i, j, minIndex, temp;
 for (i = 0; i < n - 1; i++) {
 minIndex = i;
 for (j = i + 1; j < n; j++) {
 if (arr[j] < arr[minIndex]) {
 minIndex = j;
 }
 }
 temp = arr[minIndex];
 arr[minIndex] = arr[i];
 arr[i] = temp;
 }
}
int main() {
 int n;
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 int arr[n];
 printf("Enter %d elements:\n", n);
 for (int i = 0; i < n; i++) {
 scanf("%d", &arr[i]);
 }
 clock_t start, end;
 double cpu_time_used;
 start = clock();
 selectionSort(arr, n);
 end = clock();
 cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
 printf("Sorted elements: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", arr[i]);
 }
 printf("\nTime taken: %f seconds\n", cpu_time_used);
 return 0;
}


Q.2) Write a program to sort a given set of elements using the Quick sort method and determine 
the time required to sort the elements. Repeat the experiment for different values of n, the 
number of elements in the list to be sorted. The elements can be read from a file or can be 
generated using the random number generator.

#include<stdio.h>
int partition(int a[],int low,int high)
{
int i,j,pivot,temp;
i=low+1;
j=high;
pivot=a[low];
do{
while(a[i]<pivot)
{
i++;
}
while(a[j]>pivot)
{
j--;
}
if(i<j)
{
temp=a[i];
a[i]=a[j];
a[j]=temp;
}
}
while(i<j);
temp=a[low];
a[low]=a[j];
a[j]=pivot;
return j;
}
int quicksort(int a[],int low,int high)
{
int k;
if(low<high)
{
k= partition(a,low,high);
quicksort(a,low, k-1);
quicksort(a, k+1,high);
}
}
int main()
{
int a[10],i,n;
printf("\nhow many number=");
scanf("%d",&n);
printf(" \nenter the unsorted value=");
for(i=0;i<n;i++)
{
scanf("%d",&a[i]);
}
quicksort(a,0,n-1);
printf("\n sorted value are =");
for(i=0;i<n;i++)
{
printf("%d\t",a[i]);
}
} 
