Q.1) Find a company with a workforce greater than 30 in the array. (Using find by id
    method)
    
    const companies = [
    { id: 1, name: "Company A", workforce: 25 },
    { id: 2, name: "Company B", workforce: 40 },
    { id: 3, name: "Company C", workforce: 50 },
    { id: 4, name: "Company D", workforce: 15 }
    ];
    function findCompanyById(workforceThreshold) {
    const company = companies.find(company => company.workforce >
    workforceThreshold);
    return company;
    }
    const companyWithLargeWorkforce = findCompanyById(30);
    if (companyWithLargeWorkforce) {
    console.log(`Company with workforce greater than 30:`);
    console.log(`ID: ${companyWithLargeWorkforce.id}`);
    console.log(`Name: ${companyWithLargeWorkforce.name}`);
    console.log(`Workforce: ${companyWithLargeWorkforce.workforce}`);
    } else {
    console.log('No company found with workforce greater than 30.');
    }

    Q.2) Create Express.js application to include middleware for parsing request bodies
    (e.g., JSON, form data) and validating input data. Send appropriate JSON responses
    for success and error cases.

    const express = require('express');
    const app = express();
    const port = 3000;
    app.use(express.json()); 
    app.use(express.urlencoded({ extended: true }));
    const validateInput = (req, res, next) => {
    const { name, age } = req.body;
    if (!name || !age) {
    return res.status(400).json({
    success: false,
    message: "Name and age are required!"
    });
    }
    if (isNaN(age) || age < 18) {
    return res.status(400).json({
    success: false,
    message: "Age must be a number and at least 18!"
    });
    }
    next();
    };
    app.post('/create-user', validateInput, (req, res) => {
    const { name, age } = req.body;
    const user = {
    id: Math.floor(Math.random() * 1000),
    name,
    age
    };
    res.status(201).json({
    success: true,
    message: 'User created successfully',
    user
    });
    });
    app.get('/user/:id', (req, res) => {
    const userId = req.params.id;
    const user = {
    id: userId,
    name: "John Doe",
    age: 25
    };
    res.json({
    success: true,
    user
    });
    });
    app.use((req, res) => {
    res.status(404).json({
    success: false,
    message: "Route not found"
    });
    });
    app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
    });