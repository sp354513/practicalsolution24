Q.1. Implement Ridge Regression and Lasso regression model using
boston_houses.csv and take only ‘RM’ and ‘Price’ of the houses. Divide the data as
training and testing data. Fit line using Ridge regression and to find price of a house if
it contains 5 rooms and compare results.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge, Lasso
from sklearn.metrics import mean_squared_error
from sklearn.datasets import load_boston
boston = load_boston()
df = pd.DataFrame(boston.data, columns=boston.feature_names)
columns
df = df[['RM']]
df['Price'] = boston.target
X = df[['RM']] 
y = df['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
ridge_regressor = Ridge(alpha=1.0) 
ridge_regressor.fit(X_train, y_train)
lasso_regressor = Lasso(alpha=0.1) 
lasso_regressor.fit(X_train, y_train)
y_pred_ridge = ridge_regressor.predict(X_test)
y_pred_lasso = lasso_regressor.predict(X_test)
mse_ridge = mean_squared_error(y_test, y_pred_ridge)
mse_lasso = mean_squared_error(y_test, y_pred_lasso)
print(f'Mean Squared Error for Ridge Regression: {mse_ridge:.2f}')
print(f'Mean Squared Error for Lasso Regression: {mse_lasso:.2f}')
rooms = 5
price_ridge = ridge_regressor.predict([[rooms]]) 
price_lasso = lasso_regressor.predict([[rooms]]) 
print(f'Predicted price for a house with {rooms} rooms using Ridge Regression:
${price_ridge[0]:.2f}')
print(f'Predicted price for a house with {rooms} rooms using Lasso Regression:
${price_lasso[0]:.2f}')

Q.2. Write a python program to implement Linear SVM using UniversalBank.csv 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
df = pd.read_csv('UniversalBank.csv')
print(df.isnull().sum())
df = pd.get_dummies(df, drop_first=True)
X = df.drop('Personal.Loan', axis=1) 
y = df['Personal.Loan'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
svm_model = SVC(kernel='linear', random_state=42)
svm_model.fit(X_train_scaled, y_train)
y_pred = svm_model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))
