Q. 1 Write a Java Program to implement State Pattern for Gumball Machine. Create instance
variable that holds current state from there, we just need to handle all actions, behaviors and state
transition that can happen
Steps
1. Define a State interface with methods for actions such as inserting a coin, ejecting a
coin, turning the crank, and dispensing.
2. Create concrete state classes for each of the machine’s states.
3. In the GumballMachine class, keep a reference to the current state and delegate actions to
it, allowing for state transitions.
Code Implementation
Step 1: State Interface
The State interface declares actions available on the gumball machine.
java
Copy code
interface State {
 void insertCoin();
 void ejectCoin();
 void turnCrank();
 void dispense();
}
Step 2: Concrete State Classes
Each concrete state class implements State and handles actions accordingly.
java
Copy code
// State when there is no coin inserted
class NoCoinState implements State {
 private GumballMachine gumballMachine;
 public NoCoinState(GumballMachine gumballMachine) {
 this.gumballMachine = gumballMachine;
 }
 @Override
 public void insertCoin() {
 System.out.println("Coin inserted.");
 gumballMachine.setState(gumballMachine.getHasCoinState());
 }
 @Override
 public void ejectCoin() {
 System.out.println("No coin to eject.");
 }
 @Override
 public void turnCrank() {
 System.out.println("Insert a coin first.");
 }
 @Override
 public void dispense() {
 System.out.println("Insert a coin to get a gumball.");
 }
}
// State when there is a coin inserted
class HasCoinState implements State {
 private GumballMachine gumballMachine;
 public HasCoinState(GumballMachine gumballMachine) {
 this.gumballMachine = gumballMachine;
 }
 @Override
 public void insertCoin() {
 System.out.println("Coin already inserted.");
 }
 @Override
 public void ejectCoin() {
 System.out.println("Coin ejected.");
 gumballMachine.setState(gumballMachine.getNoCoinState());
 }
 @Override
 public void turnCrank() {
 System.out.println("Crank turned...");
 gumballMachine.setState(gumballMachine.getSoldState());
 }
 @Override
 public void dispense() {
 System.out.println("Turn the crank to get a gumball.");
 }
}
// State when the gumball is being dispensed
class SoldState implements State {
 private GumballMachine gumballMachine;
 public SoldState(GumballMachine gumballMachine) {
 this.gumballMachine = gumballMachine;
 }
 @Override
 public void insertCoin() {
 System.out.println("Please wait, dispensing gumball.");
 }
 @Override
 public void ejectCoin() {
 System.out.println("Cannot eject, crank already turned.");
 }
 @Override
 public void turnCrank() {
 System.out.println("Turning twice won’t get you another gumball!");
 }
 @Override
 public void dispense() {
 gumballMachine.releaseGumball();
 if (gumballMachine.getCount() > 0) {
 gumballMachine.setState(gumballMachine.getNoCoinState());
 } else {
 System.out.println("Out of gumballs!");
 gumballMachine.setState(gumballMachine.getSoldOutState());
 }
 }
}
// State when the gumball machine is sold out
class SoldOutState implements State {
 private GumballMachine gumballMachine;
 public SoldOutState(GumballMachine gumballMachine) {
 this.gumballMachine = gumballMachine;
 }
 @Override
 public void insertCoin() {
 System.out.println("Out of gumballs, can't insert coin.");
 }
 @Override
 public void ejectCoin() {
 System.out.println("No coin to eject.");
 }
 @Override
 public void turnCrank() {
 System.out.println("No gumballs to dispense.");
 }
 @Override
 public void dispense() {
 System.out.println("No gumballs available.");
 }
}
Step 3: GumballMachine Class
The GumballMachine class manages the states and transitions.
java
Copy code
class GumballMachine {
 private State soldOutState;
 private State noCoinState;
 private State hasCoinState;
 private State soldState;
 private State state;
 private int count = 0;
 public GumballMachine(int numberOfGumballs) {
 soldOutState = new SoldOutState(this);
 noCoinState = new NoCoinState(this);
 hasCoinState = new HasCoinState(this);
 soldState = new SoldState(this);
 this.count = numberOfGumballs;
 state = (count > 0) ? noCoinState : soldOutState;
 }
 public void insertCoin() {
 state.insertCoin();
 }
 public void ejectCoin() {
 state.ejectCoin();
 }
 public void turnCrank() {
 state.turnCrank();
 state.dispense();
 }
 void setState(State state) {
 this.state = state;
 }
 void releaseGumball() {
 if (count > 0) {
 count--;
 System.out.println("A gumball comes rolling out...");
 }
 }
 public int getCount() {
 return count;
 }
 public State getSoldOutState() {
 return soldOutState;
 }
 public State getNoCoinState() {
 return noCoinState;
 }
 public State getHasCoinState() {
 return hasCoinState;
 }
 public State getSoldState() {
 return soldState;
 }
}
Step 4: Testing the Gumball Machine
java
Copy code
public class GumballMachineTest {
 public static void main(String[] args) {
 GumballMachine gumballMachine = new GumballMachine(3);
 // Test various interactions
 gumballMachine.insertCoin();
 gumballMachine.turnCrank();
 System.out.println("-----");
 gumballMachine.insertCoin();
 gumballMachine.ejectCoin();
 gumballMachine.turnCrank();
 System.out.println("-----");
 gumballMachine.insertCoin();
 gumballMachine.turnCrank();
 gumballMachine.insertCoin();
 gumballMachine.turnCrank();
 System.out.println("-----");
 gumballMachine.insertCoin();
 gumballMachine.turnCrank();
 }
}
Explanation of the Output
1. Insert Coin: The machine transitions from NoCoinState to HasCoinState.
2. Turn Crank: This transitions to SoldState and dispenses a gumball.
3. Out of Gumballs: When the count of gumballs reaches zero, the machine goes
into SoldOutState.




Q.2 Start Raspberry Pi and execute various Linux commands in command terminal
window:
ls, cd, touch, mv, rm, man, mkdir, rmdir, tar, gzip, cat, more, less, ps,
sudo, cron, chown,
chgrp, pingetc.
Step 1: Power on and Set Up the Raspberry Pi
1. Connect the Raspberry Pi to a monitor, keyboard, and mouse.
2. Insert the microSD card with Raspberry Pi OS (or another Linux OS) installed.
3. Power on the Raspberry Pi by connecting it to a power source.
Once booted, log into the Raspberry Pi desktop environment or terminal.
Step 2: Open the Terminal
 Open the terminal application from the desktop or press Ctrl + Alt + T.
Step 3: Execute Common Linux Commands
You can try executing the following commands, which are commonly used for file and system
management in Linux. Here’s a brief explanation and example usage of each:
1. ls - List files and directories in the current directory.
bash
Copy code
ls
ls -la # List all files with details
2. cd - Change the directory.
bash
Copy code
cd /home/pi # Navigate to the /home/pi directory
cd .. # Move up one directory
3. touch - Create a new, empty file.
bash
Copy code
touch example.txt
4. mv - Move or rename a file or directory.
bash
Copy code
mv example.txt new_example.txt # Rename
mv new_example.txt /home/pi/Documents # Move to another directory
5. rm - Remove files or directories.
bash
Copy code
rm new_example.txt # Remove a file
rm -r /home/pi/Documents/old_folder # Remove a directory and its
contents
6. man - Display the manual for a command.
bash
Copy code
man ls # Show manual for ls command
7. mkdir - Create a new directory.
bash
Copy code
mkdir new_folder
8. rmdir - Remove an empty directory.
bash
Copy code
rmdir new_folder
9. tar - Archive files.
bash
Copy code
tar -cvf archive.tar /home/pi/Documents # Create an archive
tar -xvf archive.tar # Extract the archive
10. gzip - Compress a file with gzip.
bash
Copy code
gzip archive.tar # Compress the file
gunzip archive.tar.gz # Decompress the file
11. cat - Display contents of a file.
bash
Copy code
cat example.txt
12. more and less - Display file contents page by page.
bash
Copy code
more example.txt
less example.txt
13. ps - Display currently running processes.
bash
Copy code
ps aux # Show all processes
14. sudo - Execute a command with superuser privileges.
bash
Copy code
sudo apt update # Update package lists as root
15. cron - Schedule recurring tasks (edit with crontab).
bash
Copy code
crontab -e # Edit crontab to schedule a task
16. chown - Change ownership of a file or directory.
bash
Copy code
sudo chown pi:pi example.txt # Change owner to user 'pi'
17. chgrp - Change the group ownership of a file or directory.
bash
Copy code
sudo chgrp staff example.txt # Change group to 'staff'
18. ping - Check network connectivity.
bash
Copy code
ping google.com # Ping Google to check internet connection
Tips for Running Commands
 Run man <command> to learn more about each command and its options.
 Use sudo carefully as it grants administrator privileges.
 Practice with caution when using commands like rm, chown, or chmod, as they can alter
system files.
