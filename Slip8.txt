Q.1. Write a python program to categorize the given news text into one of the
available 20 categories of news groups, using multinomial Na√Øve Bayes machine
learning model.

import pandas as pd
from sklearn.datasets import fetch_20newsgroups
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
newsgroups = fetch_20newsgroups(subset='all') 
X = newsgroups.data 
y = newsgroups.target 
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_tfidf = vectorizer.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.3,
random_state=42)
nb_classifier = MultinomialNB()
nb_classifier.fit(X_train, y_train)
y_pred = nb_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy of the Multinomial Naive Bayes model: {accuracy * 100:.2f}%')
print('\nClassification Report:')
print(classification_report(y_test, y_pred, target_names=newsgroups.target_names))
sample_news = [
"NASA's Perseverance rover on Mars has successfully collected its first sample of
Martian rock."
]
sample_tfidf = vectorizer.transform(sample_news)
predicted_category = nb_classifier.predict(sample_tfidf)
print(f'\nPredicted Category for the sample news:
{newsgroups.target_names[predicted_category[0]]}')

Q.2. Write a python program to implement Decision Tree whether or not to play
Tennis.

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
data = {
'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny',
'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],
'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Mild', 'Cool', 'Cool', 'Mild', 'Mild', 'Mild',
'Mild', 'Mild', 'Mild', 'Hot'],
'Humidity': ['High', 'High', 'High', 'High', 'Low', 'Low', 'Low', 'High', 'Low', 'Low',
'High', 'Low', 'Low', 'High'],
'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Weak', 'Strong', 'Weak', 'Weak',
'Strong', 'Weak', 'Strong', 'Strong', 'Weak'],
'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes',
'Yes', 'No']
}
df = pd.DataFrame(data)
label_encoders = {}
for column in ['Outlook', 'Temperature', 'Humidity', 'Wind', 'PlayTennis']:
le = LabelEncoder()
df[column] = le.fit_transform(df[column])
label_encoders[column] = le
X = df.drop('PlayTennis', axis=1) 
y = df['PlayTennis']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
random_state=42)
dt_classifier = DecisionTreeClassifier(criterion='entropy', random_state=42)
dt_classifier.fit(X_train, y_train)
y_pred = dt_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy of the Decision Tree model: {accuracy * 100:.2f}%')
print('\nClassification Report:')
print(classification_report(y_test, y_pred))
new_data = pd.DataFrame({
'Outlook': [label_encoders['Outlook'].transform(['Sunny'])[0]],
'Temperature': [label_encoders['Temperature'].transform(['Mild'])[0]],
'Humidity': [label_encoders['Humidity'].transform(['High'])[0]],
'Wind': [label_encoders['Wind'].transform(['Weak'])[0]]
})
prediction = dt_classifier.predict(new_data)
print(f'\nPrediction for new data (Sunny, Mild, High Humidity, Weak Wind): {"Play" if prediction[0] == 1 else "Don\'t Play"}')