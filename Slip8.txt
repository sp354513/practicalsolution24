Q.1) Create a simple Angular application that fetches data from an API using
HttpClient. Implement an Observable to fetch data from an API endpoint
Steps to Create the Application:

app.module.ts 

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
HttpClientModule
import { AppComponent } from './app.component';
@NgModule({
 declarations: [
 AppComponent
 ],
 imports: [
 BrowserModule,
 HttpClientModule 
 ],
 providers: [],
 bootstrap: [AppComponent]
})
export class AppModule { }

ng generate service data

data.service.ts 

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
 providedIn: 'root'
})
export class DataService {
 private apiUrl = 'https://jsonplaceholder.typicode.com/posts'; //
Replace with your API URL
 constructor(private http: HttpClient) { }
 getPosts(): Observable<any> {
 return this.http.get<any>(this.apiUrl);
 }
}

app.component.ts

import { Component, OnInit } from '@angular/core';
import { DataService } from './data.service';
@Component({
 selector: 'app-root',
 templateUrl: './app.component.html',
 styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
 posts: any[] = []; 
 constructor(private dataService: DataService) {}
 ngOnInit(): void {
 this.dataService.getPosts().subscribe(
 (data) => {
 this.posts = data; 
 },
 (error) => {
 console.error('Error fetching data', error);
 }
 );
 }
}

app.component.html 

<div class="container">
 <h1>Posts</h1>
 <div *ngIf="posts.length === 0">
 <p>Loading...</p>
 </div>
 <div *ngFor="let post of posts">
 <h3>{{ post.title }}</h3>
 <p>{{ post.body }}</p>
 </div>
</div>

6. Run the Application: After completing the above steps, start the Angular
development server:

ng serve

app.module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { AppComponent } from './app.component';
@NgModule({
 declarations: [
 AppComponent
 ],
 imports: [
 BrowserModule,
 HttpClientModule
 ],
 providers: [],
 bootstrap: [AppComponent]
})
export class AppModule { }

data.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
 providedIn: 'root'
})
export class DataService {
 private apiUrl = 'https://jsonplaceholder.typicode.com/posts';
 constructor(private http: HttpClient) { }
 getPosts(): Observable<any> {
 return this.http.get<any>(this.apiUrl);
 }
}

app.component.ts

import { Component, OnInit } from '@angular/core';
import { DataService } from './data.service';
@Component({
 selector: 'app-root',
 templateUrl: './app.component.html',
 styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
 posts: any[] = [];
 constructor(private dataService: DataService) {}
 ngOnInit(): void {
 this.dataService.getPosts().subscribe(
 (data) => {
 this.posts = data;
 },
 (error) => {
 console.error('Error fetching data', error);
 }
 );
 }
}

app.component.html:

<div class="container">
 <h1>Posts</h1>
 <div *ngIf="posts.length === 0">
 <p>Loading...</p>
 </div>
 <div *ngFor="let post of posts">
 <h3>{{ post.title }}</h3>
 <p>{{ post.body }}</p>
 </div>
</div>

Q.2) Develop an Express.js application that defines routes for Create, Update
operations on a resource (Employee)

const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;
app.use(bodyParser.json());
let employees = [
 { id: 1, name: 'John Doe', position: 'Developer', salary: 50000 },
 { id: 2, name: 'Jane Smith', position: 'Manager', salary: 60000 }
];
app.get('/employees', (req, res) => {
 res.json(employees);
});
app.post('/employees', (req, res) => {
 const newEmployee = req.body;
 if (!newEmployee.name || !newEmployee.position || !newEmployee.salary) {
 return res.status(400).json({ message: 'All fields are required' });
 }
 const newId = employees.length ? employees[employees.length - 1].id + 1 :
1;
 newEmployee.id = newId;
 employees.push(newEmployee);
 res.status(201).json({ message: 'Employee created', employee: newEmployee
});
});
app.put('/employees/:id', (req, res) => {
 const employeeId = parseInt(req.params.id);
 const updatedEmployee = req.body;
 const employee = employees.find(emp => emp.id === employeeId);
 if (!employee) {
 return res.status(404).json({ message: 'Employee not found' });
 }
 employee.name = updatedEmployee.name || employee.name;
 employee.position = updatedEmployee.position || employee.position;
 employee.salary = updatedEmployee.salary || employee.salary;
 res.json({ message: 'Employee updated', employee });
});
app.listen(port, () => {
 console.log(`Server running at http://localhost:${port}`);
});