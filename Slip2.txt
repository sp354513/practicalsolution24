Slip 2 :
Q.1 Write a Java Program to implement Singleton pattern for multithreading
// Singleton class with thread-safety in a multithreaded environment
public class Singleton {
// Declare the instance as volatile to ensure proper synchronization in a multithreaded
environment
private static volatile Singleton instance;
// Private constructor to prevent instantiation
private Singleton() {
// Simulating time-consuming initialization, e.g., database connection setup, etc.
try {
Thread.sleep(100); // Simulate some delay in instance creation
} catch (InterruptedException e) {
e.printStackTrace();
}
}
// Public method to provide access to the instance
public static Singleton getInstance() {
// First check (without locking)
if (instance == null) {
synchronized (Singleton.class) {
// Second check (with locking)
if (instance == null) {
instance = new Singleton(); // Create the instance
}
}
}
return instance;
}
public void showMessage() {
System.out.println("Hello, Singleton instance: " + this);
}
}
// Thread class to test Singleton instance access in a multithreaded environment
class SingletonTestThread extends Thread {
@Override
public void run() {
Singleton singleton = Singleton.getInstance();
singleton.showMessage();
}
}
public class SingletonTest {
public static void main(String[] args) {
// Create multiple threads to test Singleton pattern in a multithreaded environment
SingletonTestThread thread1 = new SingletonTestThread();
SingletonTestThread thread2 = new SingletonTestThread();
SingletonTestThread thread3 = new SingletonTestThread();
SingletonTestThread thread4 = new SingletonTestThread();
// Start the threads
thread1.start();
thread2.start();
thread3.start();
thread4.start();
try {
// Wait for all threads to complete
thread1.join();
thread2.join();
thread3.join();
thread4.join();
} catch (InterruptedException e) {
e.printStackTrace();
}
}
}


Q.2 Write a program to measure the distance using ultrasonic sensor and make LED blink using
Arduino.
// Define the pins for the ultrasonic sensor
const int trigPin = 9;
const int echoPin = 10;
// Define the pin for the LED
const int ledPin = 13;
// Define variables for measuring distance
long duration;
int distance;
void setup() {
// Start the serial communication for debugging
Serial.begin(9600);
// Set the trigPin as an output and echoPin as an input
pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);
// Set the LED pin as an output
pinMode(ledPin, OUTPUT);
}
void loop() {
// Send a pulse to trigger the ultrasonic sensor
digitalWrite(trigPin, LOW);
delayMicroseconds(2); // Wait for a brief moment to ensure a clean trigger
digitalWrite(trigPin, HIGH);
delayMicroseconds(10); // Send a 10-microsecond pulse to trigger the sensor
digitalWrite(trigPin, LOW);
// Measure the duration of the pulse from the echoPin
duration = pulseIn(echoPin, HIGH); // Measure the time the pulse travels
// Calculate the distance in centimeters (using speed of sound: 343 m/s)
distance = duration * 0.0344 / 2; // Time * speed of sound / 2 (for round-trip)
// Print the distance to the Serial Monitor
Serial.print("Distance: ");
Serial.print(distance);
Serial.println(" cm");
// Blink the LED if the distance is less than a threshold (e.g., 10 cm)
if (distance < 10) {
digitalWrite(ledPin, HIGH); // Turn the LED ON
delay(500); // Wait for 500 milliseconds
digitalWrite(ledPin, LOW); // Turn the LED OFF
delay(500); // Wait for 500 milliseconds
} else {
digitalWrite(ledPin, LOW); // Ensure the LED is OFF if distance is greater than 10 cm
}
delay(100); // Small delay before the next measurement
}