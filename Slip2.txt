Slip 2 :
Q.1 Write a Java Program to implement Singleton pattern for multithreading
package welcome;

public class SingletonTest {
    private static final int PROCESSOR_COUNT = Runtime.getRuntime().availableProcessors();
    private static final Thread[] THREADS = new Thread[PROCESSOR_COUNT];
    private static int instancesCount = 0;
    private static SingletonTest instance = null;

    // Private constructor to prevent instantiation
    private SingletonTest() {
    }

    // Thread-safe Singleton implementation using synchronized
    public static synchronized SingletonTest getInstance() {
        if (instance == null) {
            instancesCount++;
            instance = new SingletonTest();
        }
        return instance;
    }

    // Resets the Singleton instance and counter
    private static void reset() {
        instancesCount = 0;
        instance = null;
    }

    // Validates the environment for the test
    private static void validate() {
        if (PROCESSOR_COUNT < 2) {
            System.out.println("PROCESSOR_COUNT must be >= 2 to run the test.");
            System.exit(0);
        }
    }

    public static void main(String[] args) {
        validate();

        System.out.printf(
            "Summary :: PROCESSOR_COUNT: %d, Running Test with %d threads.%n",
            PROCESSOR_COUNT, PROCESSOR_COUNT
        );

        long currentMillis = System.currentTimeMillis();
        int testCount = 0;

        do {
            reset();

            // Initialize threads
            for (int i = 0; i < PROCESSOR_COUNT; i++) {
                THREADS[i] = new Thread(SingletonTest::getInstance);
            }

            // Start threads
            for (int i = 0; i < PROCESSOR_COUNT; i++) {
                THREADS[i].start();
            }

            // Join threads
            for (int i = 0; i < PROCESSOR_COUNT; i++) {
                try {
                    THREADS[i].join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    Thread.currentThread().interrupt();
                }
            }

            testCount++;
        } while (instancesCount <= 1 && testCount < Integer.MAX_VALUE);

        System.out.printf(
            "Singleton Pattern is broken after %d tries.%nNumber of instances: %d.%nTest duration: %dms%n",
            testCount, instancesCount, System.currentTimeMillis() - currentMillis
        );
    }
}


Q.2 Write a program to measure the distance using ultrasonic sensor and make LED blink using
Arduino.
// Define the pins for the ultrasonic sensor
const int trigPin = 9;
const int echoPin = 10;
// Define the pin for the LED
const int ledPin = 13;
// Define variables for measuring distance
long duration;
int distance;
void setup() {
// Start the serial communication for debugging
Serial.begin(9600);
// Set the trigPin as an output and echoPin as an input
pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);
// Set the LED pin as an output
pinMode(ledPin, OUTPUT);
}
void loop() {
// Send a pulse to trigger the ultrasonic sensor
digitalWrite(trigPin, LOW);
delayMicroseconds(2); // Wait for a brief moment to ensure a clean trigger
digitalWrite(trigPin, HIGH);
delayMicroseconds(10); // Send a 10-microsecond pulse to trigger the sensor
digitalWrite(trigPin, LOW);
// Measure the duration of the pulse from the echoPin
duration = pulseIn(echoPin, HIGH); // Measure the time the pulse travels
// Calculate the distance in centimeters (using speed of sound: 343 m/s)
distance = duration * 0.0344 / 2; // Time * speed of sound / 2 (for round-trip)
// Print the distance to the Serial Monitor
Serial.print("Distance: ");
Serial.print(distance);
Serial.println(" cm");
// Blink the LED if the distance is less than a threshold (e.g., 10 cm)
if (distance < 10) {
digitalWrite(ledPin, HIGH); // Turn the LED ON
delay(500); // Wait for 500 milliseconds
digitalWrite(ledPin, LOW); // Turn the LED OFF
delay(500); // Wait for 500 milliseconds
} else {
digitalWrite(ledPin, LOW); // Ensure the LED is OFF if distance is greater than 10 cm
}
delay(100); // Small delay before the next measurement
}
