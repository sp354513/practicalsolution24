Q.1) Write a program to implement BFS (Breadth First Search) and determine the time 
complexity for the same.

#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 100
struct Node {
 int data;
 struct Node* next;
};
struct Graph {
 int numVertices;
 struct Node** adjLists;
 int* visited;
};
struct Node* createNode(int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = data;
 newNode->next = NULL;
 return newNode;
}
struct Graph* createGraph(int numVertices) {
 struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
 graph->numVertices = numVertices;
 graph->adjLists = (struct Node**)malloc(numVertices * sizeof(struct Node*));
 graph->visited = (int*)malloc(numVertices * sizeof(int));
 for (int i = 0; i < numVertices; i++) {
 graph->adjLists[i] = NULL;
 graph->visited[i] = 0;
 }
 return graph;
}
void addEdge(struct Graph* graph, int src, int dest) {
 struct Node* newNode = createNode(dest);
 newNode->next = graph->adjLists[src];
 graph->adjLists[src] = newNode;
 newNode = createNode(src);
 newNode->next = graph->adjLists[dest];
 graph->adjLists[dest] = newNode;
}
void BFS(struct Graph* graph, int startVertex) {
 int queue[MAX_VERTICES];
 int front = 0, rear = 0;
 graph->visited[startVertex] = 1;
 queue[rear++] = startVertex;
 while (front < rear) {
 int currentVertex = queue[front++];
 printf("Visited %d \n", currentVertex);
 struct Node* temp = graph->adjLists[currentVertex];
 while (temp) {
 int adjVertex = temp->data;
 if (graph->visited[adjVertex] == 0) {
 graph->visited[adjVertex] = 1;
 queue[rear++] = adjVertex;
 }
 temp = temp->next;
 }
 }
}
int main() {
 struct Graph* graph = createGraph(5);
 addEdge(graph, 0, 1);
 addEdge(graph, 0, 2);
 addEdge(graph, 1, 3);
 addEdge(graph, 1, 4);
 printf("Breadth-First Search starting from vertex 0: \n");
 BFS(graph, 0); return 0;
}


Q.2) Write a program to sort a given set of elements using the Selection sort method and
determine the time required to sort the elements.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void selectionSort(int arr[], int n) {
 int i, j, minIndex, temp;
 for (i = 0; i < n - 1; i++) {
 minIndex = i;
 for (j = i + 1; j < n; j++) {
 if (arr[j] < arr[minIndex]) {
 minIndex = j;
 }
 }
 temp = arr[minIndex];
 arr[minIndex] = arr[i];
 arr[i] = temp;
 }
}
int main() {
 int n;
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 int arr[n];
 printf("Enter %d elements:\n", n);
 for (int i = 0; i < n; i++) {
 scanf("%d", &arr[i]);
 }
 clock_t start, end;
 double cpu_time_used;
 start = clock();
 selectionSort(arr, n);
 end = clock();
 cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
 printf("Sorted elements: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", arr[i]);
 }
 printf("\nTime taken: %f seconds\n", cpu_time_used);
 return 0;
}