Q.1. Write a python program to implement k-nearest Neighbors ML algorithm to
build prediction model (Use iris Dataset)

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score, classification_report
iris = load_iris()
X = iris.data 
width
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
random_state=42)
k = 3 
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=iris.target_names))

Q.2. Fit the simple linear regression and polynomial linear regression models
to
Salary_positions.csv data. Find which one is more accurately fitting to the
given
data. Also predict the salaries of level 11 and level 12 employees

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
data = pd.read_csv('Salary_positions.csv')
X = data['Position Level'].values.reshape(-1, 1) 
y = data['Salary'].values 
simple_lr = LinearRegression()
simple_lr.fit(X, y)
poly = PolynomialFeatures(degree=4)
X_poly = poly.fit_transform(X)
poly_lr = LinearRegression()
poly_lr.fit(X_poly, y)
y_pred_simple = simple_lr.predict(X)
y_pred_poly = poly_lr.predict(X_poly)
mse_simple = mean_squared_error(y, y_pred_simple)
mse_poly = mean_squared_error(y, y_pred_poly)
r2_simple = r2_score(y, y_pred_simple)
r2_poly = r2_score(y, y_pred_poly)
print(f"Simple Linear Regression MSE: {mse_simple:.2f}")
print(f"Polynomial Linear Regression MSE: {mse_poly:.2f}")
print(f"Simple Linear Regression R²: {r2_simple:.2f}")
print(f"Polynomial Linear Regression R²: {r2_poly:.2f}")
salary_11_simple = simple_lr.predict([[11]])
Level 11
salary_12_simple = simple_lr.predict([[12]]) 
Level 12
salary_11_poly = poly_lr.predict(poly.transform([[11]])) 
Prediction for Level 11
salary_12_poly = poly_lr.predict(poly.transform([[12]])) 
Prediction for Level 12
print(f"Predicted salary for level 11 (Simple LR):
${salary_11_simple[0]:,.2f}")
print(f"Predicted salary for level 12 (Simple LR):
${salary_12_simple[0]:,.2f}")
print(f"Predicted salary for level 11 (Polynomial LR):
${salary_11_poly[0]:,.2f}")
print(f"Predicted salary for level 12 (Polynomial LR):
${salary_12_poly[0]:,.2f}")
plt.scatter(X, y, color='red') 
plt.plot(X, y_pred_simple, label='Linear Regression', color='blue')
plt.plot(X, y_pred_poly, label='Polynomial Regression (degree 4)',
color='green')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.title('Salary vs Position Level')
plt.legend()
plt.show()
