Q.1) Create a Node.js application that reads data from multiple files asynchronously
using promises and async/await

const fs = require('fs').promises; 
operations
const readFile = async (fileName) => {
try {
const data = await fs.readFile(fileName, 'utf8');
console.log(`Data from ${fileName}:`);
console.log(data);
} catch (err) {
console.error(`Error reading file ${fileName}:`, err);
}
};
const readMultipleFiles = async () => {
try {
await Promise.all([
readFile('file1.txt'),
readFile('file2.txt'),
readFile('file3.txt')
]);
console.log('All files read successfully.');
} catch (err) {
console.error('Error reading files:', err);
}
};
readMultipleFiles();

Q.2) Develop an Express.js application that defines routes for Create and Read
operations on a resource (User)

const express = require('express');
const app = express();
const port = 3000;
app.use(express.json());
let users = [];
app.post('/users', (req, res) => {
const { name, email } = req.body;

if (!name || !email) {
return res.status(400).json({ error: 'Name and email are required' });
}
const newUser = { id: users.length + 1, name, email };
users.push(newUser);
res.status(201).json(newUser);
});
app.get('/users', (req, res) => {
res.status(200).json(users);
});
app.get('/users/:id', (req, res) => {
const userId = parseInt(req.params.id);
const user = users.find(u => u.id === userId);
if (!user) {
return res.status(404).json({ error: 'User not found' });
}
res.status(200).json(user);
});
app.listen(port, () => {
console.log(`Server running at http://localhost:${port}`);
});