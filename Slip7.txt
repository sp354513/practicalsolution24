Q.1 Write a Java Program to implement undo command to test Ceiling fan. [15 M]
Steps
// Step 1: CeilingFan Class
class CeilingFan {
    public static final int OFF = 0;
    public static final int LOW = 1;
    public static final int MEDIUM = 2;
    public static final int HIGH = 3;

    private int speed;

    public CeilingFan() {
        speed = OFF; // Default state is OFF
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }

    public int getSpeed() {
        return speed;
    }

    public String getSpeedName() {
        return switch (speed) {
            case OFF -> "OFF";
            case LOW -> "LOW";
            case MEDIUM -> "MEDIUM";
            case HIGH -> "HIGH";
            default -> "UNKNOWN";
        };
    }
}

// Step 2: Command Interface
interface Command {
    void execute();
    void undo();
}

// Step 3: Concrete Command Classes
class FanLowCommand implements Command {
    private CeilingFan fan;
    private int prevSpeed;

    public FanLowCommand(CeilingFan fan) {
        this.fan = fan;
    }

    @Override
    public void execute() {
        prevSpeed = fan.getSpeed();
        fan.setSpeed(CeilingFan.LOW);
        System.out.println("Fan set to LOW");
    }

    @Override
    public void undo() {
        fan.setSpeed(prevSpeed);
        System.out.println("Undo: Fan set to " + fan.getSpeedName());
    }
}

class FanMediumCommand implements Command {
    private CeilingFan fan;
    private int prevSpeed;

    public FanMediumCommand(CeilingFan fan) {
        this.fan = fan;
    }

    @Override
    public void execute() {
        prevSpeed = fan.getSpeed();
        fan.setSpeed(CeilingFan.MEDIUM);
        System.out.println("Fan set to MEDIUM");
    }

    @Override
    public void undo() {
        fan.setSpeed(prevSpeed);
        System.out.println("Undo: Fan set to " + fan.getSpeedName());
    }
}

class FanHighCommand implements Command {
    private CeilingFan fan;
    private int prevSpeed;

    public FanHighCommand(CeilingFan fan) {
        this.fan = fan;
    }

    @Override
    public void execute() {
        prevSpeed = fan.getSpeed();
        fan.setSpeed(CeilingFan.HIGH);
        System.out.println("Fan set to HIGH");
    }

    @Override
    public void undo() {
        fan.setSpeed(prevSpeed);
        System.out.println("Undo: Fan set to " + fan.getSpeedName());
    }
}

class FanOffCommand implements Command {
    private CeilingFan fan;
    private int prevSpeed;

    public FanOffCommand(CeilingFan fan) {
        this.fan = fan;
    }

    @Override
    public void execute() {
        prevSpeed = fan.getSpeed();
        fan.setSpeed(CeilingFan.OFF);
        System.out.println("Fan set to OFF");
    }

    @Override
    public void undo() {
        fan.setSpeed(prevSpeed);
        System.out.println("Undo: Fan set to " + fan.getSpeedName());
    }
}

// Step 4: RemoteControl Class
class RemoteControl {
    private Command currentCommand;
    private Command lastCommand;

    public void setCommand(Command command) {
        currentCommand = command;
    }

    public void pressButton() {
        if (currentCommand != null) {
            currentCommand.execute();
            lastCommand = currentCommand;
        }
    }

    public void pressUndo() {
        if (lastCommand != null) {
            lastCommand.undo();
        }
    }
}

// Step 5: Main Class to Test
public class CeilingFanTest {
    public static void main(String[] args) {
        CeilingFan fan = new CeilingFan();

        Command lowCommand = new FanLowCommand(fan);
        Command mediumCommand = new FanMediumCommand(fan);
        Command highCommand = new FanHighCommand(fan);
        Command offCommand = new FanOffCommand(fan);

        RemoteControl remote = new RemoteControl();

        // Test fan operations
        remote.setCommand(lowCommand);
        remote.pressButton();

        remote.setCommand(mediumCommand);
        remote.pressButton();

        remote.setCommand(highCommand);
        remote.pressButton();

        // Undo last command
        remote.pressUndo();

        // Turn off the fan
        remote.setCommand(offCommand);
        remote.pressButton();

        // Undo last command
        remote.pressUndo();
    }
}




Q.2 Write a program for LDR to vary the light intensity of LED using Arduino
// Define the pins
const int ldrPin = A0; // Analog pin connected to the LDR
const int ledPin = 9; // PWM pin connected to the LED
void setup() {
Serial.begin(9600); // Start serial communication for debugging
pinMode(ledPin, OUTPUT); // Set LED pin as output
}
void loop() {
// Read the analog value from the LDR
int ldrValue = analogRead(ldrPin);
// Map the LDR value (0-1023) to PWM range (0-255)
int ledBrightness = map(ldrValue, 0, 1023, 0, 255);
// Set the brightness of the LED
analogWrite(ledPin, ledBrightness);
// Print values to Serial Monitor for debugging
Serial.print("LDR Value: ");
Serial.print(ldrValue);
Serial.print(" -> LED Brightness: ");
Serial.println(ledBrightness);
delay(100); // Small delay for stability
}
