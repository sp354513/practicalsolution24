Q.1. Write a python program to Implement Decision Tree classifier model on Data
which is extracted from images that were taken from genuine and forged banknotelike specimens. (refer UCI dataset
https://archive.ics.uci.edu/dataset/267/banknote+authentication)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
url = "https://archive.ics.uci.edu/ml/machine-learningdatabases/00267/data_banknote_authentication.csv"
column_names = ['variance', 'skewness', 'curtosis', 'entropy', 'class']
data = pd.read_csv(url, names=column_names)
print("Checking for null values:")
print(data.isnull().sum()) 
X = data.drop('class', axis=1)
y = data['class'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, y_train)
y_pred = dt_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"\nAccuracy of Decision Tree Classifier: {accuracy * 100:.2f}%")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

Q.2. Write a python program to implement linear SVM using UniversalBank.csv.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report
url = 'UniversalBank.csv' 
data = pd.read_csv(url)
print("First few rows of the dataset:")
print(data.head())
print("\nChecking for null values:")
print(data.isnull().sum())
data = data.dropna()
X = data.drop(columns=['PersonalLoan']) 
y = data['PersonalLoan'] 
X = pd.get_dummies(X, drop_first=True) 
if necessary
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
svm_model = SVC(kernel='linear', random_state=42) 
svm_model.fit(X_train, y_train)
y_pred = svm_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"\nAccuracy of Linear SVM: {accuracy * 100:.2f}%")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))