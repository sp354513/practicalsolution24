Q.1) Write a program to implement solve ‘N’ Queens Problem using Backtracking.

#include <stdio.h>
#include <stdbool.h>
#define N 8
int board[N][N];
void printSolution() {
 for (int i = 0; i < N; i++) {
 for (int j = 0; j < N; j++) {
 printf("%2d ", board[i][j]);
 }
 printf("\n");
 }
}
bool isSafe(int row, int col) {
 for (int i = 0; i < col; i++) {
 if (board[row][i] == 1) {
 return false;
 }
 }
 for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
 if (board[i][j] == 1) {
 return false;
 }
 }
 for (int i = row, j = col; i < N && j >= 0; i++, j--) {
 if (board[i][j] == 1) {
 return false;
 }
 }
 return true;
}
bool solveNQueensUtil(int col) {
 if (col >= N) {
 return true; 
 }
 for (int i = 0; i < N; i++) {
 if (isSafe(i, col)) {
 board[i][col] = 1;
 if (solveNQueensUtil(col + 1)) {
 return true;
 }
 board[i][col] = 0; 
 }
 }
 return false; 
}
bool solveNQueens() {
 if (!solveNQueensUtil(0)) {
 printf("Solution does not exist.\n");
 return false;
 }
 printf("Solution for N-Queens problem:\n");
 printSolution();
 return true;
}
int main() {
 if (N <= 3) {
 printf("No solution exists for N less than or equal to 3.\n");
 return 1;
 }
 solveNQueens();
 return 0;
}

Q.2) Write a program to find out solution for 0/1 knapsack problem. 

#include <stdio.h>
#define MAX_ITEMS 100
#define MAX_WEIGHT 100
int max(int a, int b) {
 return (a > b) ? a : b;
}
int knapsack(int values[], int weights[], int n, int capacity) {
 int dp[MAX_ITEMS + 1][MAX_WEIGHT + 1];
 for (int i = 0; i <= n; i++) {
 for (int w = 0; w <= capacity; w++) {
 if (i == 0 || w == 0) {
 dp[i][w] = 0;
 } else if (weights[i - 1] <= w) {
 dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
 } else {
 dp[i][w] = dp[i - 1][w];
 }
 }
 }
 return dp[n][capacity];
}
int main() {
 int values[] = {60, 100, 120};
 int weights[] = {10, 20, 30};
 int n = sizeof(values) / sizeof(values[0]);
 int capacity = 50;
 int result = knapsack(values, weights, n, capacity);
 printf("Maximum value in knapsack = %d\n", result);
 return 0;
}
