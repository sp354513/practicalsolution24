Q.1 Write a Java Program to implement Facade Design Pattern for Home Theater
1. Subsystems (Components)
java
Copy code
// TV Class (Subsystem)
public class TV {
 public void on() {
 System.out.println("Turning on the TV.");
 }
 public void off() {
 System.out.println("Turning off the TV.");
 }
}
// SoundSystem Class (Subsystem)
public class SoundSystem {
 public void on() {
 System.out.println("Turning on the sound system.");
 }
 public void off() {
 System.out.println("Turning off the sound system.");
 }
 public void setVolume(int volume) {
 System.out.println("Setting sound system volume to " + volume);
 }
}
// Lights Class (Subsystem)
public class Lights {
 public void dim() {
 System.out.println("Dimming the lights.");
 }
 public void on() {
 System.out.println("Turning on the lights.");
 }
}
// DVDPlayer Class (Subsystem)
public class DVDPlayer {
 public void on() {
 System.out.println("Turning on the DVD player.");
 }
 public void off() {
 System.out.println("Turning off the DVD player.");
 }
 public void play() {
 System.out.println("Playing the DVD.");
 }
 public void stop() {
 System.out.println("Stopping the DVD.");
 }
}
2. Facade Class
java
Copy code
// HomeTheaterFacade Class (Facade)
public class HomeTheaterFacade {
 private TV tv;
 private SoundSystem soundSystem;
 private Lights lights;
 private DVDPlayer dvdPlayer;
 public HomeTheaterFacade(TV tv, SoundSystem soundSystem, Lights lights,
DVDPlayer dvdPlayer) {
 this.tv = tv;
 this.soundSystem = soundSystem;
 this.lights = lights;
 this.dvdPlayer = dvdPlayer;
 }
 public void watchMovie() {
 System.out.println("Get ready to watch a movie...");
 lights.dim();
 tv.on();
 soundSystem.on();
 soundSystem.setVolume(10);
 dvdPlayer.on();
 dvdPlayer.play();
 }
 public void endMovie() {
 System.out.println("Shutting down the movie...");
 dvdPlayer.stop();
 dvdPlayer.off();
 soundSystem.off();
 tv.off();
 lights.on();
 }
}
3. Client Code (Test)
java
Copy code
// Client Code (Main)
public class FacadePatternTest {
 public static void main(String[] args) {
 // Creating instances of subsystems (components)
 TV tv = new TV();
 SoundSystem soundSystem = new SoundSystem();
 Lights lights = new Lights();
 DVDPlayer dvdPlayer = new DVDPlayer();
 // Creating the facade
 HomeTheaterFacade homeTheater = new HomeTheaterFacade(tv,
soundSystem, lights, dvdPlayer);
 // Using the facade to simplify the process of watching a movie
 homeTheater.watchMovie();
 System.out.println("\n--- Movie finished ---\n");
 // Using the facade to end the movie and turn off the systems
 homeTheater.endMovie();
 }
}
Explanation:
1. Subsystem Classes: These classes (TV, SoundSystem, Lights, and DVDPlayer) represent
the individual components of the home theater system. Each class has methods to control
its respective functionality, such as turning on/off, adjusting volume, or playing a DVD.
2. Facade Class (HomeTheaterFacade): This class provides a simplified interface to
control all the components of the home theater system. It has methods
like watchMovie() and endMovie() that internally call the appropriate methods on the
subsystem objects. The facade hides the complexity of interacting with each component.
3. Client Code: In the FacadePatternTest class, we create instances of the subsystems
(TV, SoundSystem, Lights, and DVDPlayer) and pass them to the HomeTheaterFacade.
The client can then simply call watchMovie() or endMovie() without needing to deal
with the individual components of the system.




Q.2 Write a program to sense a finger when it is placed on the board Arduino. [15 M]
#define TOUCH_SENSOR_PIN 8 // Pin for the capacitive touch sensor
#define LED_PIN 13 // Pin for the LED (optional)
void setup() {
// Initialize the touch sensor pin as input
pinMode(TOUCH_SENSOR_PIN, INPUT);

// Initialize the LED pin as output
pinMode(LED_PIN, OUTPUT);

// Start the Serial Monitor
Serial.begin(9600);
}
void loop() {
// Read the state of the touch sensor
int sensorState = digitalRead(TOUCH_SENSOR_PIN);

// Check if a finger is placed on the sensor
if (sensorState == LOW) { // TTP223 sensor returns LOW when touched
Serial.println("Finger detected!");
digitalWrite(LED_PIN, HIGH); // Turn on LED (if connected)
} else {
Serial.println("No finger detected.");
digitalWrite(LED_PIN, LOW); // Turn off LED
}
// Delay before the next reading
delay(100); // Delay for 100ms before checking again
}
