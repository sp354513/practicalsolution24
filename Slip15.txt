Q.1. Create an ANN and train it on house price dataset classify the house price is
above average or below average

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_boston
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
boston = load_boston()
X = boston.data 
y = boston.target 
average_price = np.mean(y)

y_class = np.where(y > average_price, 1, 0)
X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.2,
random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu')) 
model.add(Dense(1, activation='sigmoid')) 
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2)
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy*100:.2f}%")
predictions = model.predict(X_test)
predictions = (predictions > 0.5).astype(int) 
print("Predictions for the first 10 houses:")
print(predictions[:10].flatten())
print("Actual labels for the first 10 houses:")
print(y_test[:10].values)

Q.2. Write a python program to implement multiple Linear Regression for a house
price dataset

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
actual dataset (e.g., 'house_prices.csv')
data = {
 'Area': [1500, 1800, 2400, 3000, 3500, 4000, 4500, 5000, 5500, 6000],
 'Price': [245000, 312000, 369000, 450000, 512000, 570000, 600000, 650000,
700000, 750000]
}
df = pd.DataFrame(data)
X = df[['Area']] 
y = df['Price'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')
plt.scatter(X_test, y_test, color='blue', label='Actual prices')
plt.plot(X_test, y_pred, color='red', label='Regression line')
plt.title('House Price Prediction')
plt.xlabel('Area (Square feet)')
plt.ylabel('Price')
plt.legend()
plt.show()
new_area = np.array([[2500]])
predicted_price = model.predict(new_area)
print(f'Predicted price for a house with 2500 sq. feet:
${predicted_price[0]:,.2f}')