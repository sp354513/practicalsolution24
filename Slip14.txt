Q.1) Write a program to implement BFS (Breadth First Search) and determine the time 
complexity for the same.

#include<stdio.h>

void add(int item);
int delete();
void bfs(int s, int n);

int q[5], a[5][5], front = -1, n, rear = -1, vis[5], item;

void main() {
    int i, j, s;
    printf("\nHow many vertices: ");
    scanf("%d", &n);
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            printf("\nEnter if there is an edge between %d & %d: ", i, j);
            scanf("%d", &a[i][j]);
        }
    } 
    printf("\nThe Adjacency Matrix is:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            printf("\t%d", a[i][j]);
        }
        printf("\n");
    }
    printf("\nEnter starting vertex: ");
    scanf("%d", &s);
    for (i = 0; i < 5; i++)
        vis[i] = 0;
    bfs(s, n);
}

void bfs(int s, int n) {
    int i, p;
    add(s);
    vis[s]=1;
    while ((p = delete()) != 0) {
        printf("%d ", p);
        for (i = 1; i <= n; i++) {
            if (a[p][i] != 0 && vis[i] == 0) {
                add(i);
   	            vis[i] = 1;
            }
        }
        
    }
}

void add(int item) {
    if (rear == 4)
        printf("\nQueue overflow ");
    else {
        if (rear == -1) {
            q[++rear] = item;
            ++front;
        } else
            q[++rear] = item;
    }
}

int delete() {
    int k;
    if (front > rear || front == -1)
        return 0; // indicate queue underflow
    else {
        k = q[front++];
        return k;
    }
}




Q.2) Write a program to sort a given set of elements using the Selection sort method and
determine the time required to sort the elements.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void selectionSort(int arr[], int n) {
 int i, j, minIndex, temp;
 for (i = 0; i < n - 1; i++) {
 minIndex = i;
 for (j = i + 1; j < n; j++) {
 if (arr[j] < arr[minIndex]) {
 minIndex = j;
 }
 }
 temp = arr[minIndex];
 arr[minIndex] = arr[i];
 arr[i] = temp;
 }
}
int main() {
 int n;
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 int arr[n];
 printf("Enter %d elements:\n", n);
 for (int i = 0; i < n; i++) {
 scanf("%d", &arr[i]);
 }
 clock_t start, end;
 double cpu_time_used;
 start = clock();
 selectionSort(arr, n);
 end = clock();
 cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
 printf("Sorted elements: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", arr[i]);
 }
 printf("\nTime taken: %f seconds\n", cpu_time_used);
 return 0;
}