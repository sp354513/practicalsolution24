Q.1) Create Angular application that print the name of students who got 85% using
filter and map method.

ng generate component student-list


// student-list.component.ts

import { Component } from '@angular/core';
@Component({
 selector: 'app-student-list',
 templateUrl: './student-list.component.html',
 styleUrls: ['./student-list.component.css']
})
export class StudentListComponent {
 students = [
 { name: 'Alice', score: 90 },
 { name: 'Bob', score: 76 },
 { name: 'Charlie', score: 85 },
 { name: 'David', score: 88 },
 { name: 'Eve', score: 82 }
 ];
 highScorers = this.students
 .filter(student => student.score >= 85)
 .map(student => student.name);
}

// student-list.component.html

<div style="text-align: center; margin-top: 20px;">
 <h2>Students with 85% or Higher</h2>
 <ul>
 <li *ngFor="let studentName of highScorers">{{ studentName }}</li>
 </ul>
</div>

// app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { StudentListComponent } from './student-list/student-list.component';
@NgModule({
 declarations: [
 AppComponent,
 StudentListComponent
 ],
 imports: [
 BrowserModule
 ],
 providers: [],
 bootstrap: [AppComponent]
})
export class AppModule { }

<!-- app.component.html -->
<app-student-list></app-student-list>

Q.2) Develop an Express.js application that defines routes for Create, Update
operations on a resource (Employee)

const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const PORT = 3000;
app.use(bodyParser.json());
let employees = [];
app.post('/employees', (req, res) => {
const { id, name, position, salary } = req.body;
if (!id || !name || !position || !salary) {
return res.status(400).json({ error: 'All fields are required (id, name, position,
salary)' });
}
const existingEmployee = employees.find(emp => emp.id === id);
if (existingEmployee) {
return res.status(409).json({ error: 'Employee with the same ID already exists' });
}
const newEmployee = { id, name, position, salary };
employees.push(newEmployee);
res.status(201).json({ message: 'Employee created successfully', employee:
newEmployee });
});
app.put('/employees/:id', (req, res) => {
const employeeId = req.params.id;
const { name, position, salary } = req.body;
const employee = employees.find(emp => emp.id === employeeId);
if (!employee) {
return res.status(404).json({ error: 'Employee not found' });
}
if (name) employee.name = name;
if (position) employee.position = position;
if (salary) employee.salary = salary;
res.json({ message: 'Employee updated successfully', employee });
});
app.listen(PORT, () => {
console.log(`Server is running on http://localhost:${PORT}`);
});