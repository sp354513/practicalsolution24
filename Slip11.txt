Q.1. Write a python program to implement Polynomial Regression for Boston
Housing Dataset

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score
boston = load_boston()
X = boston.data 
y = boston.target 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
degree = 2 
poly = PolynomialFeatures(degree=degree)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)
model = LinearRegression()
model.fit(X_train_poly, y_train)
y_pred = model.predict(X_test_poly)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error (MSE): {mse}')
print(f'R-Squared: {r2}')
plt.scatter(y_test, y_pred)
plt.xlabel('True Values (Prices)')
plt.ylabel('Predicted Values (Prices)')
plt.title('Polynomial Regression: Predicted vs Actual')
plt.show()


Q.2. Write a python program to Implement Decision Tree classifier model on Data
which is extracted from images that were taken from genuine and forged banknotelike specimens. (refer UCI dataset
https://archive.ics.uci.edu/dataset/267/banknote+authentication)


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
import urllib.request
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data.csv"
filename = "banknote-authentication.csv"
urllib.request.urlretrieve(url, filename)
df = pd.read_csv(filename, header=None)
df.columns = ['Variance', 'Skewness', 'Curtosis', 'Entropy', 'Class']
X = df.drop(columns='Class') 
y = df['Class'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print("Classification Report:")
print(classification_report(y_test, y_pred))