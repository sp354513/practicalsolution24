Q.1. Fit the simple linear regression and polynomial linear regression models to
Salary_positions.csv data. Find which one is more accurately fitting to the given data.
Also predict the salaries of level 11 and level 12 employees

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
df = pd.read_csv('Salary_positions.csv') 
directory
X = df['Position Level'].values.reshape(-1, 1) 
y = df['Salary'].values 
simple_linear_reg = LinearRegression()
simple_linear_reg.fit(X, y)
poly = PolynomialFeatures(degree=4) 
X_poly = poly.fit_transform(X)
poly_linear_reg = LinearRegression()
poly_linear_reg.fit(X_poly, y)
y_pred_simple = simple_linear_reg.predict(X)
y_pred_poly = poly_linear_reg.predict(X_poly)
mse_simple = mean_squared_error(y, y_pred_simple)
mse_poly = mean_squared_error(y, y_pred_poly)
print(f"Mean Squared Error for Simple Linear Regression: {mse_simple}")
print(f"Mean Squared Error for Polynomial Linear Regression: {mse_poly}")
level_11 = np.array([[11]])
level_12 = np.array([[12]])
salary_11_simple = simple_linear_reg.predict(level_11)
salary_12_simple = simple_linear_reg.predict(level_12)
salary_11_poly = poly_linear_reg.predict(poly.transform(level_11))
salary_12_poly = poly_linear_reg.predict(poly.transform(level_12))
print(f"Predicted Salary for Level 11 (Simple Linear Regression):
{salary_11_simple[0]}")
print(f"Predicted Salary for Level 12 (Simple Linear Regression):
{salary_12_simple[0]}")
print(f"Predicted Salary for Level 11 (Polynomial Linear Regression):
{salary_11_poly[0]}")
print(f"Predicted Salary for Level 12 (Polynomial Linear Regression):
{salary_12_poly[0]}")
plt.scatter(X, y, color='blue')
plt.plot(X, y_pred_simple, color='red')
plt.title('Simple Linear Regression')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()
plt.scatter(X, y, color='blue')
X_grid = np.arange(min(X), max(X), 0.1) 
X_grid = X_grid.reshape((len(X_grid), 1))
plt.plot(X_grid, poly_linear_reg.predict(poly.transform(X_grid)), color='red')
plt.title('Polynomial Linear Regression')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()

Q.2. Write a python program to implement Naive Bayes on weather forecast dataset.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
'Wind', and target 'Rain'
df = pd.read_csv('weather_forecast.csv')
print(df.isnull().sum())
and 0 (No)
df['Rain'] = df['Rain'].map({'Yes': 1, 'No': 0})
X = df.drop('Rain', axis=1) 
y = df['Rain'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
random_state=42)
nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
y_pred = nb_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")
print("Classification Report:")
print(classification_report(y_test, y_pred))