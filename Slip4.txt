Q.1) Write a program to implement a Merge Sort algorithm to sort a given set of elements and 
determine the time required to sort the elements 

#include<stdio.h>
void merge( int a[],int low ,int mid ,int high)
{
int i,j,k,b[10];
i=low;
j=mid+1;
k=low;
while((i<=mid) && (j<=high))
{
if(a[i]<a[j])
{
b[k]=a[i];
i++;k++;
}
else
{
b[k]=a[j];
j++;k++;
}
}
while(i<=mid)
{
b[k]=a[i];
k++;
i++;
}
while(j<=high)
{
b[k]=a[j];
k++;
j++;
}
for(i=low;i<=high;i++)
{
a[i]=b[i];
}
}
void mergesort(int a[],int low,int high)
{
int mid;
if(low<high)
{
mid = (low + high) /2;
mergesort(a, low, mid);
mergesort(a, mid+1, high);
merge(a, low, mid, high);
}
}
void main()
{
int a[10],i,n;
printf("\nhow many number");
scanf("%d",&n);
printf(" \nenter the unsorted value=");
for(i=0;i<n;i++)
{
scanf("%d",&a[i]);
}
mergesort(a,0,n-1);
printf("\n sorted value are =");
for(i=0;i<n;i++)
{
printf("%d\t",a[i]);
}
}

Q.2) Write a program to implement Knapsack problems using Greedy method

#include <stdio.h>
#define MAX_ITEMS 100

struct Item {
 int value;
 int weight;
};

int compare(const void *a, const void *b) {
 double ratio_a = ((double)(((struct Item *)a)->value)) / (((struct Item *)a)->weight);
 double ratio_b = ((double)(((struct Item *)b)->value)) / (((struct Item *)b)->weight);
 return ratio_b - ratio_a;
}

void knapsackGreedy(int capacity, struct Item items[], int n) {

 qsort(items, n, sizeof(struct Item), compare);
 int currentWeight = 0; // Current weight in the knapsack
 double totalValue = 0.0; // Total value of items selected
 printf("Selected items:\n");
 for (int i = 0; i < n; i++) {

 if (currentWeight + items[i].weight <= capacity) {

 printf("Item %d - Value: %d, Weight: %d\n", i + 1, items[i].value, items[i].weight);
 currentWeight += items[i].weight;
 totalValue += items[i].value;
 } else {

 int remainingCapacity = capacity - currentWeight;
 totalValue += items[i].value * ((double)remainingCapacity / items[i].weight);
 printf("Item %d - Value: %d, Weight: %d (Fraction: %.2lf)\n", i + 1, items[i].value, items[i].weight, 
((double)remainingCapacity / items[i].weight));
 break;
 }
 }
 printf("Total Value: %.2lf\n", totalValue);
}
int main() {
 int capacity, n;
 printf("Enter the capacity of the knapsack: ");
 scanf("%d", &capacity);
 printf("Enter the number of items: ");
 scanf("%d", &n);
 struct Item items[MAX_ITEMS];
 printf("Enter the value and weight of each item:\n");
 for (int i = 0; i < n; i++) {
 printf("Item %d: ", i + 1);
 scanf("%d %d", &items[i].value, &items[i].weight);
 }
 knapsackGreedy(capacity, items, n);
 return 0;
}