Q.1) Fetch the details using ng-repeat in AngularJS

<!DOCTYPE html>
<html ng-app="myApp">
<head>
    <title>Shopping Cart Example</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
    <style>
        table {
            width: 50%;
            margin: 20px;
            border-collapse: collapse;
        }
        table, th, td {
            border: 1px solid black;
        }
        th, td {
            padding: 10px;
            text-align: center;
        }
    </style>
</head>
<body ng-controller="myCtrl">
    <h2>Product List</h2>
    <table>
        <tr>
            <th>Product</th>
            <th>Price</th>
            <th>Action</th>
        </tr>
        <tr ng-repeat="item in items">
            <td>{{ item.name }}</td>
            <td>{{ item.price | currency }}</td>
            <td><button ng-click="addToCart(item)">Add to Cart</button></td>
        </tr>
    </table>
    <h3>Your Cart</h3>
    <ul>
        <li ng-repeat="cartItem in cart">
            {{ cartItem.name }} - {{ cartItem.price | currency }}
        </li>
    </ul>
    <h4>Total: {{ totalPrice() | currency }}</h4>
    <script>
        var app = angular.module('myApp', []);
        app.controller('myCtrl', function($scope) {
            $scope.items = [
                { id: 1, name: 'Item 1', price: 100 },
                { id: 2, name: 'Item 2', price: 200 },
                { id: 3, name: 'Item 3', price: 300 }
            ];
            $scope.cart = [];
            $scope.addToCart = function(item) {
                $scope.cart.push(item);
            };
            $scope.totalPrice = function() {
                var total = 0;
                angular.forEach($scope.cart, function(item) {
                    total += item.price;
                });
                return total;
            };
        });
    </script>
</body>
</html>


Q.2) Express.js application to include middleware for parsing request bodies (e.g.,
JSON, form data) and validating input data.

const express = require('express');
const { body, validationResult } = require('express-validator');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;
// Middleware to parse JSON and form data
app.use(bodyParser.json()); // For JSON payloads
app.use(bodyParser.urlencoded({ extended: true })); // For form data (x-www-formurlencoded)
// Route with input validation
app.post('/submit', [
// Validate and sanitize input data using express-validator
body('name').isString().withMessage('Name must be a
string').notEmpty().withMessage('Name is required'),
body('email').isEmail().withMessage('Valid email is required').normalizeEmail(),
body('age').isInt({ min: 18 }).withMessage('Age must be a number and at least 18'),
], (req, res) => {
// Check for validation errors
const errors = validationResult(req);
if (!errors.isEmpty()) {
return res.status(400).json({ errors: errors.array() });
}
// If validation is successful, process the request data
const { name, email, age } = req.body;
res.status(200).json({
message: 'Data received successfully',
data: {
name,
email,
age
}
});
});
// Start the server
app.listen(port, () => {
console.log(`Server is running at http://localhost:${port}`);
});