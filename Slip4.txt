Q.1 Write a Java Program to implement Factory method for Pizza Store with createPizza(),
orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s like
NyStyleCheesePizza, ChicagoStyleCheesePizza etc.
1. Pizza Interface
java
Copy code
public interface Pizza {
 void prepare();
 void bake();
 void cut();
 void box();
}
2. Concrete Pizza Classes
Each specific pizza will implement the Pizza interface.
NyStyleCheesePizza.java
java
Copy code
public class NyStyleCheesePizza implements Pizza {
 @Override
 public void prepare() {
 System.out.println("Preparing New York Style Cheese Pizza...");
 }
 @Override
 public void bake() {
 System.out.println("Baking New York Style Cheese Pizza...");
 }
 @Override
 public void cut() {
 System.out.println("Cutting New York Style Cheese Pizza...");
 }
 @Override
 public void box() {
 System.out.println("Boxing New York Style Cheese Pizza...");
 }
}
ChicagoStyleCheesePizza.java
java
Copy code
public class ChicagoStyleCheesePizza implements Pizza {
 @Override
 public void prepare() {
 System.out.println("Preparing Chicago Style Cheese Pizza...");
 }
 @Override
 public void bake() {
 System.out.println("Baking Chicago Style Cheese Pizza...");
 }
 @Override
 public void cut() {
 System.out.println("Cutting Chicago Style Cheese Pizza...");
 }
 @Override
 public void box() {
 System.out.println("Boxing Chicago Style Cheese Pizza...");
 }
}
3. PizzaStore Class with Factory Method
The PizzaStore class will have a createPizza() method that is overridden by subclasses to
create different types of pizzas.
java
Copy code
public abstract class PizzaStore {
 // The orderPizza() method is the factory method that creates a pizza
 public Pizza orderPizza(String type) {
 Pizza pizza = createPizza(type); // Factory method
 pizza.prepare();
 pizza.bake();
 pizza.cut();
 pizza.box();
 return pizza;
 }
 // This method will be overridden by subclasses to create specific pizza
types
 protected abstract Pizza createPizza(String type);
}
4. Concrete Pizza Store Subclasses
We can now create specific pizza stores (like NyPizzaStore and ChicagoPizzaStore) that will
implement the createPizza() method to create specific types of pizzas.
NyPizzaStore.java
java
Copy code
public class NyPizzaStore extends PizzaStore {
 @Override
 protected Pizza createPizza(String type) {
 if (type.equals("cheese")) {
 return new NyStyleCheesePizza();
 } else {
 // Add other pizza types as needed
 return null;
 }
 }
}
ChicagoPizzaStore.java
java
Copy code
public class ChicagoPizzaStore extends PizzaStore {
 @Override
 protected Pizza createPizza(String type) {
 if (type.equals("cheese")) {
 return new ChicagoStyleCheesePizza();
 } else {
 // Add other pizza types as needed
 return null;
 }
 }
}
5. Main Class to Test
Now, let's implement a Main class to test the pizza store ordering process.
java
Copy code
public class Main {
 public static void main(String[] args) {
 // Create a New York Pizza Store
 PizzaStore nyPizzaStore = new NyPizzaStore();
 // Order a Cheese Pizza from New York Pizza Store
 Pizza nyPizza = nyPizzaStore.orderPizza("cheese");
 System.out.println("\n-----\n");
 // Create a Chicago Pizza Store
 PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();
 // Order a Cheese Pizza from Chicago Pizza Store
 Pizza chicagoPizza = chicagoPizzaStore.orderPizza("cheese");
 }
}



Q.2 Write a program to sense a finger when it is placed on the board Arduino.
[15 M]
// Define the pin for the capacitive touch sensor
const int touchPin = 7; // Pin connected to the SIG (signal) of the TTP223
sensor
const int ledPin = 13; // Pin connected to the LED
void setup() {
 // Set the touch sensor pin as input
 pinMode(touchPin, INPUT);
 // Set the LED pin as output
 pinMode(ledPin, OUTPUT);
 // Start serial communication for debugging
 Serial.begin(9600);
}
void loop() {
 // Read the state of the touch sensor
 int touchState = digitalRead(touchPin);
 // If the sensor detects a touch (HIGH state)
 if (touchState == HIGH) {
 digitalWrite(ledPin, HIGH); // Turn on the LED
 Serial.println("Finger detected! LED ON");
 } else {
 digitalWrite(ledPin, LOW); // Turn off the LED
 Serial.println("No finger detected. LED OFF");
 }
 // Small delay for stability
 delay(100);
}